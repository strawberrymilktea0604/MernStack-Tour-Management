{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nconst useFetch = (url = '') => {\n  _s();\n  const [data, setData] = useState([]);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(false);\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        const res = await fetch(url);\n        if (!res.ok) {\n          throw new Error(`Failed to fetch: ${res.status} ${res.statusText}`);\n        }\n        const contentType = res.headers.get('content-type');\n        if (!contentType || !contentType.includes('application/json')) {\n          throw new Error('Received non-JSON response');\n        }\n        const result = await res.json();\n        setData(result.data);\n      } catch (err) {\n        setError(err.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    if (url) fetchData();\n  }, [url]);\n  return {\n    data,\n    error,\n    loading\n  };\n};\n_s(useFetch, \"6nhoqVvctpRRYiww7uwVz/g7/BM=\");\nexport default useFetch;","map":{"version":3,"names":["useState","useEffect","useFetch","url","_s","data","setData","error","setError","loading","setLoading","fetchData","res","fetch","ok","Error","status","statusText","contentType","headers","get","includes","result","json","err","message"],"sources":["C:/Users/khanh/Downloads/MernStack-Tour-Management/frontend/src/hooks/useFetch.js"],"sourcesContent":["import { useState, useEffect } from 'react';\r\n\r\nconst useFetch = (url = '') => {\r\n    const [data, setData] = useState([]);\r\n    const [error, setError] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            setLoading(true);\r\n            try {\r\n                const res = await fetch(url);\r\n\r\n                if (!res.ok) {\r\n                    throw new Error(`Failed to fetch: ${res.status} ${res.statusText}`);\r\n                }\r\n\r\n                const contentType = res.headers.get('content-type');\r\n                if (!contentType || !contentType.includes('application/json')) {\r\n                    throw new Error('Received non-JSON response');\r\n                }\r\n\r\n                const result = await res.json();\r\n                setData(result.data);\r\n            } catch (err) {\r\n                setError(err.message);\r\n            } finally {\r\n                setLoading(false);\r\n            }\r\n        };\r\n\r\n        if (url) fetchData();\r\n    }, [url]);\r\n\r\n    return { data, error, loading };\r\n};\r\n\r\nexport default useFetch;\r\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,MAAMC,QAAQ,GAAGA,CAACC,GAAG,GAAG,EAAE,KAAK;EAAAC,EAAA;EAC3B,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACO,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EACxC,MAAM,CAACS,OAAO,EAAEC,UAAU,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAE7CC,SAAS,CAAC,MAAM;IACZ,MAAMU,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC1BD,UAAU,CAAC,IAAI,CAAC;MAChB,IAAI;QACA,MAAME,GAAG,GAAG,MAAMC,KAAK,CAACV,GAAG,CAAC;QAE5B,IAAI,CAACS,GAAG,CAACE,EAAE,EAAE;UACT,MAAM,IAAIC,KAAK,CAAC,oBAAoBH,GAAG,CAACI,MAAM,IAAIJ,GAAG,CAACK,UAAU,EAAE,CAAC;QACvE;QAEA,MAAMC,WAAW,GAAGN,GAAG,CAACO,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QACnD,IAAI,CAACF,WAAW,IAAI,CAACA,WAAW,CAACG,QAAQ,CAAC,kBAAkB,CAAC,EAAE;UAC3D,MAAM,IAAIN,KAAK,CAAC,4BAA4B,CAAC;QACjD;QAEA,MAAMO,MAAM,GAAG,MAAMV,GAAG,CAACW,IAAI,CAAC,CAAC;QAC/BjB,OAAO,CAACgB,MAAM,CAACjB,IAAI,CAAC;MACxB,CAAC,CAAC,OAAOmB,GAAG,EAAE;QACVhB,QAAQ,CAACgB,GAAG,CAACC,OAAO,CAAC;MACzB,CAAC,SAAS;QACNf,UAAU,CAAC,KAAK,CAAC;MACrB;IACJ,CAAC;IAED,IAAIP,GAAG,EAAEQ,SAAS,CAAC,CAAC;EACxB,CAAC,EAAE,CAACR,GAAG,CAAC,CAAC;EAET,OAAO;IAAEE,IAAI;IAAEE,KAAK;IAAEE;EAAQ,CAAC;AACnC,CAAC;AAACL,EAAA,CAjCIF,QAAQ;AAmCd,eAAeA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}